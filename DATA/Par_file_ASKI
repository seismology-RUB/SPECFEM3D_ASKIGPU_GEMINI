#------------------------------------------------------------------------------------
# ASKI EXTERNAL MODEL
#
# import inverted models to SPECFEM3D_Cartesian
#------------------------------------------------------------------------------------
# First the SPECFEM3D model is set, as defined by standard SPECFEM mechanisms (defined in Par_file). 
# Then, ONLY IF INDICATED BELOW, this model is overwritten by the ASKI 1D background model at all depths where it is defined. 
# After that, ONLY IF INDICATED BELOW, an ASKI inverted model is superimposed to the existing model (will define absolute values, 
# but at the boundaries of the inversion domain it will smooth out to the existing model)

# USE_ASKI_BACKGROUND_MODEL indicates whether SPECFEM3D_Cartesian should use the 1D reference model as defined in
# the file given by character string FILE_ASKI_BACKGROUND_MODEL , relative to "DATA/" .
# (will simply overwrite model values on all GLL points, dependent on depth (or rather z). THIS MODEL WILL
# NOT AFFECT THE MESHING OF DISCONTINUITIES ETC.!!)
USE_ASKI_BACKGROUND_MODEL = .true.
FILE_ASKI_BACKGROUND_MODEL = ASKI_prem

# IMPOSE_ASKI_INVERTED_MODEL indicates whether SPECFEM3D_Cartesian should impose the ASKI inverted model as
# defined in the file given by character string FILE_ASKI_INVERTED_MODEL , relative to "DATA/" .
# This model will be set in the region of the inversion grid, where it was derived.
# Model parameters are absolute perturbations (dp).
IMPOSE_ASKI_INVERTED_MODEL = .false.
FILE_ASKI_INVERTED_MODEL = 

#------------------------------------------------------------------------------------
# ASKI OUTPUT
#
# producing kernel green tensor / kernel displacement files
#------------------------------------------------------------------------------------

# parameter COMPUTE_ASKI_OUTPUT controls if any ASKI output files (i.e. kernel green tensor / 
# kernel displacement files) are produced
# (set by run_specfem3dCartesianForASKI_simulations.py)
  COMPUTE_ASKI_OUTPUT = .true.
  
# Decide, whether to ONLY produce the main ASKI output file (at the beginning of this simulation, filename 'ASKI_outfile.main') 
# This can be useful if you want to first run initBasics to check the ASKI output volume and the background model etc.
# (set by run_specfem3dCartesianForASKI_simulations.py)
  ASKI_MAIN_FILE_ONLY = .false.

# Decide whether to write the ASKI main file or not. When using the same mesh and also earth model for all events
# the main file needs to be written only once and for all. 
# (set by run_specfem3dCartesianForASKI_simulations.py)
  ASKI_MAIN_FILE_WRITE = .false.
  
# set the basename to the ASKI main file, if desired for every event or even kernel_displ and kernel_gt, it should be chosen identical to
# ASKI_outfile below, eles free choice. Do not forget to enter this name into the iter_parfie and parfile_specfem_inversion_grid.
# (set by run_specfem3dCartesianForASKI_simulations.py)
  ASKI_MAIN_FILE = /data/Gemini/fwiaski/alparray-80-60-30-0.1Hz/iteration_step_001/aski_main_files/ASKI.main
  
# absolute output filename including absolute path (will be used to open the output file as is),
# i.e. in case of a green tensor simulation, outfile should contain the extension "_[green_tensor_component]"
# ASKI_outfile is handled as a basename, to which ".main" and for each frequency ".jf######" 
# (e.g. ".jf000013" for frequency index 13) is appended
# (set by run_specfem3dCartesianForASKI_simulations.py)
  ASKI_outfile = /data/Gemini/fwiaski/alparray-80-60-30-0.1Hz/iteration_step_001/kernel_green_tensors/kernel_gt_PANIX_CZ

# id of ASKI output (e.g. eventID, station name plus component, etc.)
# (set by run_specfem3dCartesianForASKI_simulations.py)
  ASKI_output_ID = PANIX_CZ

# choose to deconvolve the derivative of the source time function from the wavefield spectra before writing them to files.
# select .true. for any Green function computations!
# even if a heaviside source time function is used, the velocity field is not exactly a Green function ( = displacement wavefield
# w.r.t. an impulse source time function), since a steep error function is used by SPECFEM to resemble a quasi-heaviside function.
# this steep error function, furthermore, is dependent on timestep DT! 
# hence, only by deconvolution of (the derivative of) this quasi-heaviside source time function, the real Green function, 
# which is independent of the time step can be computed.
# (set by run_specfem3dCartesianForASKI_simulations.py)
  ASKI_DECONVOLVE_STF = .true.

#------------------------------------------------------------------------------------
# FREQUENCY DISCRETIZATION AND FOURIER TRANSFORM
#
#   the double precision df[Hz] and integer values jf have the following meaning:
#   the spectra are saved for all frequencies f = (jf)*df [Hz]
#------------------------------------------------------------------------------------

# Predefined frequency step df, that is used to evaluate spectrum (in case we want to do an inverse FT, we need to choose with care
# df=1/length_of_time_series and suitably high frequency indices (dependent on frequency content), as
# we could lose periodicity (if in exp^(-i2pi(k)(n)/N) "N" is no integer, these are no roots of 1 anymore)).
# Save the spectra for frequencies f = (ASKI_jf)*ASKI_df (ASKI_nf many)
# (taken from main parameter file)
  ASKI_df = 0.01
  ASKI_nf = 9
  ASKI_jf = 1 2 3 4 5 6 7 8 9

# Choose the method of Discrete Fourier Transform:
# EXPLICIT_SUMMATION : on-the-fly summation of complex values s(t)*exp^(-i*2pi*f*t) 
#                      (slightly more memory efficient than GOERTZEL_STANDARD)
# GOERTZEL_STANDARD: using Goertzel's algorithm, only half the number of multiplications compared with EXPLICIT_SUMMATION
#                    -> BUT overall speed-up compared with EXPLICIT_SUMMATION is not noticeable for small tested examples
  ASKI_DFT_method = GOERTZEL_STANDARD

# Choose precision of Discrete Fourier Transform. If there is enough memory available, it is highly recommended
# to use ASKI_DFT_double = .true. in which case double precision spectral values are hold in memory (single
# precision is written to file, though, but less roundoffs during summation).
# Otherwise choose ASKI_DFT_double = .false. in which case single precision spectral values will be used in memory.
# The wavefield point-independent transformation coefficients exp^(-i*2pi*f*t) (or values Wr in case of Goertzel)
# are always in double precision!
  ASKI_DFT_double = .true.

# Decide whether the (oversampled, noisy, ...) time series should be tapered by a hanning taper (on tail)
# before (i.e. on-the-fly while) applying the discrete fourier transform.
# If ASKI_DFT_apply_taper = .true. the value of ASKI_DFT_taper_percentage (between 0.0 and 1.0) defines the amount of
# total time for which the hanning taper will be applied at the tail of the time series.
  ASKI_DFT_apply_taper = .true.
  ASKI_DFT_taper_percentage = 0.05

#------------------------------------------------------------------------------------
# INVERSION GRID
#
# ASKI supports several types of inversion grids for FORWARD_METHOD = SPECFEM3D:
#
#   ASKI_type_inversion_grid = 1, (TYPE_INVERSION_GRID = schunkInversionGrid) NOT TO BE USED WITH SPECFEM3D Cartesian!
#      ASKI internal, but SPECFEM independent simple spherical inverison grid
#
#   ASKI_type_inversion_grid = 2, (TYPE_INVERSION_GRID = scartInversionGrid)
#      ASKI internal, but SPECFEM independent cartesian inversion grid:
#      the values for ASKI output are stored at all inner GLL points of spectral elements which lie
#      inside the block volume defined below by parameters ASKI_(cw)(xyz)
#      ASKI loactes the coordinates of those points inside the inversion grid cells and computes
#      integration weights for them
#
#   ASKI_type_inversion_grid = 3, (TYPE_INVERSION_GRID = ecartInversionGrid)
#      external inversion grid provided e.g. by CUBIT, which may contain tetrahedra, as well as hexahedra
#      as in case of ASKI_type_inversion_grid = 2, ASKI output is stored at all inner GLL points of elements
#      which are inside the volume defined by ASKI_(cw)(xyz)
#      ASKI locates the wavefield points inside the inversion grid and computes weights
#
#   ASKI_type_inversion_grid = 4, (TYPE_INVERSION_GRID = specfem3dInversionGrid)
#      use SPECFEM elements as inversion grid:
#      wavefield points are ALL GLL points of an element for elements which are (at least partly) inside the 
#      volume defined by ASKI_(cw)(xyz)
#      additionally store the jacobians for all wavefield points
#      assume ncell = ntot_wp/(NGLLX*NGLLY*NGLLY) as the number of inversion grid cells, and the order of 
#      wavefield points accordingly (do k=1,NGLLZ; do j=1,NGLLY; do i=1,NGLLX; ip=ip+1 ....)
#
#   ASKI_type_inversion_grid = 5, (TYPE_INVERSION_GRID = chunksInversionGrid) NOT TO BE USED WITH SPECFEM3D Cartesian!
#      ASKI internal, but SPECFEM independent more elaborate spherical inverison grid
#
# Dependent on ASKI_type_inversion_grid, (a selection of) the following parameters may be used to define a volume 
# within which wavefield points are searched for:
#
# First, ASKI_wx,ASKI_wy,ASKI_wz define the total width of a block which is centered in x=y=z=0
#    e.g. the total block extension in x-direction covers all points with 
#    x >= - 0.5*ASKI_wx and
#    x <=  0.5*ASKI_wx
# Then, ASKI_rot_X,ASKI_rot_Y,ASKI_rot_Z define rotation angles in degrees by which the block is rotated (anti-clockwise)
# about the Z, Y and X coordinate axis,
# before ASKI_cx,ASKI_cy,ASKI_cz define a vector by which the rotated block is shifted (new center of block)
#
# BE AWARE:
# - the parameters for rotation angles ASKI_rot_(XYZ) MUST ALWAYS be assinged to values! set to 0. if not used
# - scartInversionGrid only supports ASKI_rot_Z and uses a different definintion of the z-coverage
# - ecartInversionGrid and specfem3dInversionGrid use ALL rotation angles ASKI_rot_(XYZ)
#
#------------------------------------------------------------------------------------

# type of inversion grid, in order to produce correct output
  ASKI_type_inversion_grid = 4

# width of ASKI output volume
  ASKI_wx = 1800000.
  ASKI_wy = 1350000.
  ASKI_wz =  600000.
# rotation angles in degrees of block about the respective axes
  ASKI_rot_X = 0.0
  ASKI_rot_Y = 0.0
  ASKI_rot_Z = 0.0
# center of ASKI output volume
  ASKI_cx = 0.0
  ASKI_cy = 0.0
  ASKI_cz = -300000.0
